AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Components to automate VDM data collection for reports outside of the
  AWS Console
Parameters:
  EnvironmentName:
    Description: An environment name that is suffixed to resource names
    Type: String
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet
      in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet
      in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24
  VDMReportingDatabaseName:
    Description: The name of the database to create to store the VDM output
    Type: String
    Default: VDMReporting
Resources:
  MasterBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: master-${EnvironmentName}-${AWS::AccountId}
  sesvdmBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: sesvdm-${EnvironmentName}-${AWS::AccountId}
  sesdmarcemailparsed:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ses-dmarc-email-parsed-${EnvironmentName}-${AWS::AccountId}
  sesdmarcemailjsondata:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ses-dmarc-email-json-data-${EnvironmentName}-${AWS::AccountId}
  dmarcraw:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: dmarc-raw-${EnvironmentName}-${AWS::AccountId}
  EmailReceivedBucket:
    Type: AWS::S3::Bucket
    DependsOn: EmailReceivedInvokePermission
    Properties:
      BucketName:
        Fn::Sub: ses-dmarc-email-received-${EnvironmentName}-${AWS::AccountId}
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:*
          Function:
            Fn::GetAtt:
            - EmailReceivedFunction
            - Arn
  EmailReceivedInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - EmailReceivedFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::ses-dmarc-email-received-${EnvironmentName}-${AWS::AccountId}
  GlueRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName:
        Fn::Sub: GlueRole-${EnvironmentName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: glue.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonRDSFullAccess
      - arn:aws:iam::aws:policy/SecretsManagerReadWrite
      - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      - arn:aws:iam::aws:policy/AmazonSESFullAccess
      - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Description: A single role to be able to manage the vdmtoqs components
      Tags:
      - Key: project
        Value:
          Fn::Sub: ${EnvironmentName}
  LakeFormationGrant:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Resource: '*'
          Action: lakeformation:GetDataAccess
          Effect: Allow
      Roles:
      - Ref: GlueRole
      PolicyName:
        Fn::Sub: LakeFormationReadWrite-${EnvironmentName}
  AWSQuickSightRDSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Grants Amazon QuickSight describe permissions to AWS RDS resources
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Resource: '*'
          Action: rds:Describe*
          Effect: Allow
  AWSQuickSightS3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Grants Amazon QuickSight read permission to Amazon S3 resources
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Resource: arn:aws:s3:::*
          Action: s3:ListAllMyBuckets
          Effect: Allow
        - Resource:
          - Fn::Sub: arn:aws:s3:::${sesvdmBucket}
          - Fn::Sub: arn:aws:s3:::${sesdmarcemailparsed}
          - Fn::Sub: arn:aws:s3:::${sesdmarcemailjsondata}
          Action:
          - s3:ListBucket
          Effect: Allow
        - Resource:
          - Fn::Sub: arn:aws:s3:::${sesvdmBucket}
          - Fn::Sub: arn:aws:s3:::${sesdmarcemailparsed}
          - Fn::Sub: arn:aws:s3:::${sesdmarcemailjsondata}
          Action:
          - s3:GetObject
          - s3:GetObjectVersion
          Effect: Allow
  AWSQuickSightIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Grants Amazon QuickSight list permissions to AWS IAM resources
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Resource: '*'
          Action:
          - iam:List*
          Effect: Allow
  QuickSightRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - Ref: AWSQuickSightS3Policy
      - Ref: AWSQuickSightRDSPolicy
      - arn:aws:iam::aws:policy/service-role/AWSQuicksightAthenaAccess
      - Ref: AWSQuickSightIAMPolicy
      MaxSessionDuration: 3600
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - quicksight:ListVPCConnections
            - quicksight:CreateVPCConnection
            - quicksight:DescribeVPCConnection
            - quicksight:DeleteVPCConnection
            - quicksight:UpdateVPCConnection
            - ec2:describeSubnets
            - ec2:describeVpcs
            - ec2:describeSecurityGroups
            - ec2:CreateNetworkInterface
            - ec2:ModifyNetworkInterfaceAttribute
            - ec2:DeleteNetworkInterface
            - ec2:DescribeSubnets
            - ec2:DescribeSecurityGroups
            Effect: Allow
            Sid: Statement1
        PolicyName: QSVPCConn
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: quicksight.amazonaws.com
  VDMReportingDatabaseAdminSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Sub: VDMDBSecret-${EnvironmentName}
      Description: The administrative username and password for the VDM Database.
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: password
        PasswordLength: 25
        ExcludeCharacters: '"@/\'
  VDMReportingDatabaseInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: VDMReportingDatabaseAdminSecret
    Properties:
      DBName:
        Ref: VDMReportingDatabaseName
      Engine: mysql
      MasterUsername: admin
      MasterUserPassword:
        Fn::Sub:
        - '{{resolve:secretsmanager:VDMDBSecret-${EnvironmentName}:SecretString:password}}'
        - EnvironmentName:
            Ref: EnvironmentName
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 5
      PubliclyAccessible: false
      DeletionProtection: false
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VPCSecurityGroups:
      - Ref: VDMReportingDatabaseSecurityGroup
  VDMReportingDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupEgress:
      - CidrIp: 127.0.0.1/32
        IpProtocol: '-1'
      VpcId:
        Ref: VPC
      GroupDescription: Security Group protecting the VDM Reporting Database
      Tags:
      - Key: Name
        Value:
          Fn::Sub: VDMReportingDatabaseSecurityGroup-${EnvironmentName}
  CreateDatabaseTablesFunctionSecurityGroupIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - CreateDatabaseTablesFunctionSecurityGroup
        - GroupId
      ToPort: 3306
      FromPort: 3306
      GroupId:
        Fn::GetAtt:
        - VDMReportingDatabaseSecurityGroup
        - GroupId
  GlueSecurityGroupIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - GlueSecurityGroup
        - GroupId
      ToPort: 3306
      FromPort: 3306
      GroupId:
        Fn::GetAtt:
        - VDMReportingDatabaseSecurityGroup
        - GroupId
  QuickSightVPCConnectionIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId:
        Fn::GetAtt:
        - QuickSightVPCConnectionSecurityGroup
        - GroupId
      GroupId:
        Fn::GetAtt:
        - VDMReportingDatabaseSecurityGroup
        - GroupId
  ImportLatestVDMJob:
    Type: AWS::Glue::Job
    Properties:
      Name:
        Fn::Sub: ${EnvironmentName}_importLatestVDM
      Description: Import the latest VDM file into the RDS database
      Role:
        Fn::GetAtt:
        - GlueRole
        - Arn
      Command:
        Name: glueetl
        PythonVersion: 3
        ScriptLocation: s3://sampackage-333594653524/b25184eb9619c27209d51a716a86e64d
      GlueVersion: '4.0'
      DefaultArguments:
        --enable-auto-scaling: 'true'
        --job-bookmark-option: job-bookmark-disable
        --bucketname:
          Fn::Sub: ${sesvdmBucket}
        --additional-python-modules:
          Fn::Sub: s3://${MasterBucket}/packages/boto3-1.28.83-py3-none-any.whl,boto3==1.28.83
        --extra-py-files:
          Fn::Sub: s3://${MasterBucket}/packages/awscli-1.29.83-py3-none-any.whl
        --python-modules-installer-option: update
      MaxRetries: 0
      NumberOfWorkers: 4
      WorkerType: G.1X
  VDMtoRDSJob:
    Type: AWS::Glue::Job
    Properties:
      Name:
        Fn::Sub: vdmtords-${EnvironmentName}
      Description: Collect VDM data and send to RDS
      Role:
        Fn::GetAtt:
        - GlueRole
        - Arn
      Command:
        Name: glueetl
        PythonVersion: 3
        ScriptLocation: s3://sampackage-333594653524/f2a9b0f5c2516dcb1c3e9930956eac7a
      GlueVersion: '4.0'
      DefaultArguments:
        --enable-auto-scaling: 'true'
        --job-bookmark-option: job-bookmark-disable
        --bucketname:
          Ref: sesvdmBucket
        --mysqlconn:
          Ref: GlueDatabaseConnection
      MaxRetries: 0
      NumberOfWorkers: 4
      WorkerType: G.1X
      Connections:
        Connections:
        - Ref: GlueDatabaseConnection
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      DatabaseInput:
        Name:
          Fn::Sub: ${EnvironmentName}_gdc
      CatalogId:
        Ref: AWS::AccountId
  DMARCJsonDataTable:
    Type: AWS::Glue::Table
    Properties:
      DatabaseName:
        Ref: GlueDatabase
      CatalogId:
        Ref: AWS::AccountId
      TableInput:
        StorageDescriptor:
          Columns:
          - Name: feedback
            Type: struct<version:string,report_metadata:struct<org_name:string,email:string,extra_contact_info:string,report_id:string,date_range:struct<begin:string,end:string>>,policy_published:struct<domain:string,adkim:string,aspf:string,p:string,sp:string,pct:string,fo:string>,record:struct<row:struct<source_ip:string,count:string,policy_evaluated:struct<disposition:string,dkim:string,spf:string>>,identifiers:struct<header_from:string,envelope_from:string>,auth_results:struct<dkim:struct<domain:string,selector:string,result:string>,spf:struct<domain:string,scope:string,result:string>>>>
          Location:
            Fn::Sub: s3://${sesdmarcemailjsondata}/raw/
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
        Name: dmarcjsondata
  DMARCJsonEvaluatedDataTable:
    Type: AWS::Glue::Table
    Properties:
      DatabaseName:
        Ref: GlueDatabase
      CatalogId:
        Ref: AWS::AccountId
      TableInput:
        StorageDescriptor:
          Columns:
          - Name: feedback
            Type: struct<version:string,report_metadata:struct<org_name:string,email:string,report_id:string,date_range:struct<begin:string,end:string>>,policy_published:struct<domain:string,adkim:string,aspf:string,p:string,sp:string,pct:string,fo:string>,record:array<struct<row:struct<source_ip:string,count:string,policy_evaluated:struct<disposition:string,dkim:string,spf:string>>,identifiers:struct<envelope_to:string,envelope_from:string,header_from:string>,auth_results:struct<dkim:array<struct<domain:string,selector:string,result:string>>,spf:struct<domain:string,scope:string,result:string>>>>>
          Location:
            Fn::Sub: s3://${sesdmarcemailjsondata}/raw/
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
        Name: dmarcjsonevaluateddata
  GlueDatabaseConnection:
    Type: AWS::Glue::Connection
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      ConnectionInput:
        Name:
          Fn::Sub: ${VDMReportingDatabaseName}-connection-${EnvironmentName}
        ConnectionType: JDBC
        ConnectionProperties:
          JDBC_CONNECTION_URL:
            Fn::Sub: jdbc:mysql://${VDMReportingDatabaseInstance.Endpoint.Address}:3306/${VDMReportingDatabaseName}
          USERNAME: admin
          PASSWORD:
            Fn::Sub:
            - '{{resolve:secretsmanager:VDMDBSecret-${EnvironmentName}:SecretString:password}}'
            - EnvironmentName:
                Ref: EnvironmentName
        PhysicalConnectionRequirements:
          AvailabilityZone:
            Fn::Select:
            - 0
            - Fn::GetAZs: ''
          SecurityGroupIdList:
          - Ref: GlueSecurityGroup
          SubnetId:
            Ref: PrivateSubnet1
  GlueSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group allowing Glue to connect to the VDM Reporting
        Database
      SecurityGroupEgress:
      - IpProtocol: tcp
        DestinationSecurityGroupId:
          Fn::GetAtt:
          - VDMReportingDatabaseSecurityGroup
          - GroupId
        ToPort: 3306
        FromPort: 3306
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: GlueSecurityGroup-${EnvironmentName}
  GlueVDMWorkflow:
    Type: AWS::Glue::Workflow
    Properties:
      Name: importVDMMetrics
      Description: Runs the API to retrieve VDM metrics by day and insert them into
        MySQL via two distinct Glue Jobs
      DefaultRunProperties:
        --bucketname:
          Fn::Sub: ${sesvdmBucket}
  GlueTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: MidnightEST
      Type: SCHEDULED
      Schedule: cron(0 5 * * ? *)
      WorkflowName:
        Ref: GlueVDMWorkflow
      StartOnCreation: true
      Actions:
      - JobName:
          Ref: ImportLatestVDMJob
  GlueTrigger2:
    Type: AWS::Glue::Trigger
    Properties:
      Name: Success
      Type: CONDITIONAL
      WorkflowName:
        Ref: GlueVDMWorkflow
      StartOnCreation: true
      Actions:
      - JobName:
          Ref: VDMtoRDSJob
      Predicate:
        Logical: ANY
        Conditions:
        - LogicalOperator: EQUALS
          JobName:
            Ref: ImportLatestVDMJob
          State: SUCCEEDED
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCIDR
      Tags:
      - Key: Name
        Value:
          Fn::Sub: VPC_${EnvironmentName}
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Private Subnet (AZ1) for ${EnvironmentName}
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Private Subnet (AZ2) for ${EnvironmentName}
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS instance
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Private Routes
  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet1
  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet2
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Ref: VPC
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
      - Ref: PrivateRouteTable
      VpcEndpointType: Gateway
  EmailReceivedFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - LambdaVDMExecRole
        - Arn
      Timeout: 300
      Runtime: python3.11
      FunctionName: ses-dmarc-email-parser
      Handler: lambda_function.lambda_handler
      Environment:
        Variables:
          destination_bucket:
            Ref: sesdmarcemailparsed
          dmarc_report_bucket:
            Ref: sesdmarcemailjsondata
          dmarc_report_bucket_folder:
            Ref: dmarcraw
          source_bucket:
            Fn::Sub: ses-dmarc-email-received-${AWS::AccountId}
          modify_workmail_message: 'false'
          select_headers: ALL
      CodeUri: s3://sampackage-333594653524/deed658f6d2b174dfe23a09c8e413edf
  LambdaVDMExecRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
  CreateDatabaseTablesFunction:
    Type: AWS::Serverless::Function
    DependsOn:
    - S3Endpoint
    - PrivateRouteTable
    - PrivateRouteTableAssociation1
    - PrivateRouteTableAssociation2
    Properties:
      Role:
        Fn::GetAtt:
        - CreateDatabaseTablesFunctionExecutionRole
        - Arn
      Timeout: 90
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      CodeUri: s3://sampackage-333594653524/e2287570d39c0d01e0167ba41dc5e14a
      VpcConfig:
        SecurityGroupIds:
        - Ref: CreateDatabaseTablesFunctionSecurityGroup
        SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
      Environment:
        Variables:
          db_name:
            Ref: VDMReportingDatabaseName
          dbpassword:
            Fn::Sub:
            - '{{resolve:secretsmanager:VDMDBSecret-${EnvironmentName}:SecretString:password}}'
            - EnvironmentName:
                Ref: EnvironmentName
          dbuser: admin
          mysql_host:
            Fn::GetAtt:
            - VDMReportingDatabaseInstance
            - Endpoint.Address
  CreateDatabaseTablesFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
  CreateDatabaseTablesFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Lambda to connect to the database to create the tables
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        DestinationSecurityGroupId:
          Fn::GetAtt:
          - VDMReportingDatabaseSecurityGroup
          - GroupId
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: CreateDatabaseTablesSecurityGroup_${EnvironmentName}
  CreateDatabaseTablesTrigger:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - CreateDatabaseTablesFunction
        - Arn
  QuickSightVPCConnection:
    Type: AWS::QuickSight::VPCConnection
    Properties:
      RoleArn:
        Fn::GetAtt:
        - QuickSightVPCConnectionRole
        - Arn
      AwsAccountId:
        Ref: AWS::AccountId
      SecurityGroupIds:
      - Ref: QuickSightVPCConnectionSecurityGroup
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      Name: TestVPCConnection
      VPCConnectionId: VDMVPCConnection
  QuickSightVPCConnectionRole:
    Type: AWS::IAM::Role
    Properties:
      MaxSessionDuration: 3600
      Policies:
      - PolicyName: QuicksightVPCConnectionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - quicksight:ListVPCConnections
            - quicksight:CreateVPCConnection
            - quicksight:DescribeVPCConnection
            - quicksight:DeleteVPCConnection
            - quicksight:UpdateVPCConnection
            - ec2:describeSubnets
            - ec2:describeVpcs
            - ec2:describeSecurityGroups
            - ec2:CreateNetworkInterface
            - ec2:ModifyNetworkInterfaceAttribute
            - ec2:DeleteNetworkInterface
            - ec2:DescribeSubnets
            - ec2:DescribeSecurityGroups
            Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: quicksight.amazonaws.com
  QuickSightVPCConnectionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow QuickSight to connect to the RDS Database
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        DestinationSecurityGroupId:
          Fn::GetAtt:
          - VDMReportingDatabaseSecurityGroup
          - GroupId
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: QuickSightVPCConnectionSecurityGroup_${EnvironmentName}
  CreateAthenaViewsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - CreateAthenaViewsFunctionExecutionRole
        - Arn
      Timeout: 60
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      CodeUri: s3://sampackage-333594653524/800909aba4bda0584142f47e2aaecc33
      Environment:
        Variables:
          account_number:
            Ref: AWS::AccountId
          database_name:
            Ref: GlueDatabase
          output_s3_bucket:
            Ref: MasterBucket
          glue_table_name:
            Ref: DMARCJsonDataTable
          glue_evaluated_table_name:
            Ref: DMARCJsonEvaluatedDataTable
  CreateAthenaViewsFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      Policies:
      - PolicyName: CreateViewAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: CreateGlueTablePerm1
            Effect: Allow
            Action: glue:GetDatabases
            Resource:
            - Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog
            - Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueDatabase}
          - Sid: CreateGlueTablePerm22
            Effect: Allow
            Action:
            - glue:GetTable
            - glue:CreateTable
            Resource:
            - Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog
            - Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueDatabase}
            - Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${GlueDatabase}/*
          - Sid: AthenaAccess
            Effect: Allow
            Action:
            - athena:StartQueryExecution
            - athena:GetQueryExecution
            Resource: '*'
          - Sid: S3ResponseAccess
            Effect: Allow
            Action:
            - s3:ListMultipartUploadParts
            - s3:PutObject
            - s3:GetObject
            - s3:AbortMultipartUpload
            - s3:GetBucketLocation
            Resource:
            - Fn::GetAtt:
              - MasterBucket
              - Arn
            - Fn::Sub: ${MasterBucket.Arn}/*
  CreateAthenaViewsTrigger:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - CreateAthenaViewsFunction
        - Arn
Outputs:
  VDMReportingDatabaseID:
    Description: The instance ID of the RDS instance created
    Value:
      Ref: VDMReportingDatabaseInstance
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-VDMReportingDBID
  VDMReportingDatabaseName:
    Description: The name of the database created on the RDS instance
    Value:
      Ref: VDMReportingDatabaseName
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-VDMReportingDBName
  VDMReportingDatabaseSecret:
    Description: The ARN of the Secret used to secure the VDM Database
    Value:
      Ref: VDMReportingDatabaseAdminSecret
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-VDMReportingDBSecret
  GlueDataCatalog:
    Description: The name of the Glue Data Catalog created for this data
    Value:
      Ref: GlueDatabase
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-GlueDataCatalog
  QuickSightVPCConnectionARN:
    Description: The ARN of the QuickSight VPC Connection created for this solution
    Value:
      Fn::GetAtt:
      - QuickSightVPCConnection
      - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-QuickSightVPCConnectionARN
